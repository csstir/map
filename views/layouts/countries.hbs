<!DOCTYPE html>
<html>

<head>
  <meta charset='utf-8' />
  <title>Map</title>
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.css' rel='stylesheet' />
  <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700' rel='stylesheet'>
  <!-- Font Awesome -->
  <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.1/css/all.css">
  <!-- Bootstrap core CSS -->
  <link href="css/bootstrap.min.css" rel="stylesheet">
  <!-- Material Design Bootstrap -->
  <link href="css/mdb.min.css" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/css/select2.min.css" rel="stylesheet" />
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/datepicker/0.6.5/datepicker.min.css" />
  <!-- Your custom styles (optional) -->
  <link href="css/style.css" rel="stylesheet">
  <link href='/stylesheets/stylesheets.css' type="text/css" rel='stylesheet'>




  <script type="text/javascript" src="js/jquery-3.3.1.min.js"></script>

  <script type="text/javascript" src="js/popper.min.js"></script>

  <script type="text/javascript" src="js/bootstrap.min.js"></script>

  <script type="text/javascript" src="js/mdb.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.6-rc.0/js/select2.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/datepicker/0.6.5/datepicker.min.js"></script>

  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v0.51.0/mapbox-gl.js'></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/fuse.js/3.4.4/fuse.min.js"></script>

  <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.17.11/lodash.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.css" rel="stylesheet" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/1.1.3/sweetalert.min.js"></script>
  <script src="js/extra.js"></script>

  <script type="text/javascript" src="/js/typeahead.min.js"></script>

</head>

<body>
  <div class="container-fluid">
    <div class="row">

      <div class="col-md-3 col-xs-12 p-0 sidebar">
        <ul class="nav nav-tabs nav-justified md-tabs" id="myTabJust" role="tablist">
          <li class="nav-item">
            <a class="nav-link active" id="paper-tab-just" data-toggle="tab" href="#paper-just" role="tab"
              aria-controls="paper-just" aria-selected="true">Papers</a>
          </li>
          <li class="nav-item">
            <a class="nav-link" id="project-tab-just" data-toggle="tab" href="#project-just" role="tab"
              aria-controls="project-just" aria-selected="false">Projects</a>
          </li>
        </ul>
        <div class="tab-content card" id="myTabContentJust">
          <div class="tab-pane fade show active" id="paper-just" role="tabpanel" aria-labelledby="paper-tab-just">
            <div class="form-group">
              <label class="form-label">Select country</label>
              <select class="country-select w-100 form-control" name="state" onChange="countryGrab(this.value)">
                <option disabled selected value> -- select an option -- </option>
                {{#each test.features}}

                <option value="{{this.properties.name}}" name="country" class="checkboxSelect">{{this.properties.name}}

                  {{/each}}
              </select>
            </div>
            <form action="get" id="dateGet">
              <div class="md-form">
                <input placeholder="Selected date" type="date" id="start-date-1" class="form-control datepicker"
                  name="sday">
                <label for="date-picker-example">Start Date</label>
              </div>
              <div class="md-form">
                <input placeholder="Selected date" type="date" id="end-date-1" class="form-control datepicker"
                  name="eday">
                <label for="date-picker-example">End Date</label>
              </div>
              <button class="btn btn-info btn-sm btn-block my-4" type="submit">Submit</button>
              <hr>
            </form>

            <form id="typeahead_person_submit" method="get">
              <div class="md-form">
                <label for="typeValue" id="update_label">Search for Professor</label>
                <input class="personGet tt-query form-control" id="typeValue" spellcheck="false" autocomplete="off"
                  name="typeaheadPersonGet" type="text" />

              </div>
              <button class="btn btn-info btn-sm btn-block my-4 submit" type="submit">Submit</button>
              <hr>
            </form>

            <form id="typeahead_organisation_submit" method="get">
              <div class="md-form">
                <label for="typeValue1" id="update_label">Search for Organisation</label>
                <input class="organisationGet tt-query form-control" id="typeValue1" spellcheck="false"
                  autocomplete="off" name="typeaheadGet" type="text" />

              </div>
              <button class="btn btn-info btn-sm btn-block my-4 submit" type="submit">Submit</button>
              <hr>
            </form>

            <button class="btn btn-block btn-sm btn-danger my-4" id="restButton" type="submit">Reset</button>

          </div>

          <div class="tab-pane fade" id="project-just" role="tabpanel" aria-labelledby="project-tab-just">
            <div class="form-group">
              <label class="form-label">Select country</label>
              <select class="country-select w-100 form-control" name="state"
                onchange="grabProjectCountries(this.value)">
                <option disabled selected value> -- select an option -- </option>
                {{#each resultsCountries.features}}

                <option name="projectCountries" class="projects_countries" value="{{this.properties.name}}">
                  {{this.properties.name}}

                  {{/each}}

              </select>
            </div>



            <form action="get" id="project_dGate">
              <div class="md-form">
                <input placeholder="Selected date" type="date" name="sday">
                <label for="date-picker-example">Start Date</label>
              </div>
              <div class="md-form">
                <input placeholder="Selected date" type="date" name="eday">
                <label for="date-picker-example">End Date</label>
              </div>
              <button class="btn btn-info btn-sm btn-block my-4" type="submit">Submit</button>
              <hr>
            </form>
            <form id="typeahead_project_submit" method="get">
              <div class="md-form">
                <label for="typeValue2" id="update_label">Search for Funders</label>
                <input class="projectFunderGet tt-query form-control" id="typeValue2" spellcheck="false"
                  autocomplete="off" name="typeaheadFunderGet" type="text" />

              </div>
              <button class="btn btn-info btn-sm btn-block my-4 submit" id="typeahead_project_submit"
                type="submit">Submit</button>
            </form>
            <hr>
            <form id="typeahead_grab_collabs" method="get">
              <div class="md-form">
                <label for="typeValue3" id="update_label">Search for Collaborators</label>
                <input class="collabsGet tt-query form-control" id="typeValue3" spellcheck="false" autocomplete="off"
                  name="typeaheadCollabs" type="text" />

              </div>
              <button class="btn btn-info btn-sm btn-block my-4 submit" id="typeahead_grab_collabs"
                type="submit">Submit</button>
            </form>
            <hr>
            <form id="typeahead_personProject_submit" method="get">
              <div class="md-form">
                <label for="typeValue4" id="update_label">Search for Professor</label>
                <input class="personProjectGet tt-query form-control" id="typeValue4" spellcheck="false"
                  autocomplete="off" name="typeaheadPersonProjectGet" type="text" />

              </div>
              <button class="btn btn-info btn-sm btn-block my-4 submit" id="typeahead_personProject_submit"
                type="submit">Submit</button>
            </form>


            <button class="btn btn-block btn-sm btn-danger my-4" id="restButtonProject" type="submit">Reset</button>
          </div>
        </div>
      </div>


      <div class="col-md-9 col-xs-12 p-0 map-wrapper">
        <div id='map' class='map pad2'></div>



        <nav id="filter-group topDiv" class="filter-group">



          <input type="checkbox" id="collab">
          <label for="collab">Collaborators</label>


          <input type="checkbox" id="lead">
          <label for="lead">Lead</label>


          <input type="checkbox" id="partner">
          <label for="partner">Partner</label>


          <input type="checkbox" id="other">
          <label for="other">Other</label>

        </nav>


      </div>

    </div>
  </div>

  <script>



//Get the objects from the route files, use handlebars notation

    var country_names = {{{countries}}}
    var results = {{{countries}}}
    var business1 = {{{businesses}}}
    var projectsObj = {{{projects}}}
    countryNames = {{{countryNames }}}

    names = {{{names}}}









    roleArray = []
    leadProjects = []
    collabProjects = []
    otherProjects = []
    partnerProjects = []





    for (i = 0; i < projectsObj.features.length; i++) {

      if (projectsObj.features[i].properties.roles === 'Collaborator') {
        collabProjects.push(projectsObj.features[i])
      }
      else if (projectsObj.features[i].properties.roles === 'Partner') {
        partnerProjects.push(projectsObj.features[i])
      }
      else if (projectsObj.features[i].properties.roles === 'Lead') {
        leadProjects.push(projectsObj.features[i])
      }
      else {
        otherProjects.push(projectsObj.features[i])
      }
    }

    leadObj = {
      type: "FeatureCollection",
      features: leadProjects
    }
    partnerObj = {
      type: "FeatureCollection",
      features: partnerProjects
    }
    collabObj = {
      type: "FeatureCollection",
      features: collabProjects

    }

    otherObj = {
      type: "FeatureCollection",
      features: otherProjects
    }



    resultsCountryProjects = {{{resultsCountryProjects}}}



    let resultObject = business1.features.map(({ properties: {authorTitle, title }}) =>
      ({ authorTitle: authorTitle, title }));





    var lowResults = []
    var midResults = []
    var highResults = []

    obj = results

    obj = results

    let arrSorted = [];
    for (i = 0; i < results.features.length; i++) {
      arrSorted.push(obj.features[i])

    }

    arrSorted.sort((a, b) => (a.properties.amount > b.properties.amount) ? -1 : 1)


    console.log('forgot', arrSorted)


    for (i = 0; i < results.features.length; i++) {
      const objLength = results.features[i].properties.amount
      if (objLength <= 5) {
        lowResults.push(results.features[i])
      }
      if ((objLength > 5) && (objLength <= 10)) {
        midResults.push(results.features[i])
      }
      if (objLength > 10) {
        highResults.push(results.features[i])
      }
    }



    lowResultsObj = {
      type: "FeatureCollection",
      features: lowResults

    }

    midResultsObj = {
      type: "FeatureCollection",
      features: midResults
    }

    highResultsObj = {
      type: "FeatureCollection",
      features: highResults

    }


    // This adds the map to your page
    mapboxgl.accessToken = 'pk.eyJ1IjoiY3NzdGlyIiwiYSI6ImNqdjhrbmpkdzBnMDg0NG15ZXZiOG91Y2kifQ.UEp9u03hBelc8tQxkDVabg';
    // This adds the map to your page
    var map = new mapboxgl.Map({
      // container id specified in the HTML
      container: 'map',
      // style URL
      style: 'mapbox://styles/mapbox/streets-v9',
      // initial position in [lon, lat] format
      center: [-3.9206, 56.144],
      // initial zoom
      zoom: 1
    });


    var zoomthreshold = 4;



    map.on("load", function (e) {

      map.loadImage('stylesheets/home.png', function (error, image) {
        if (error) throw error;
        map.addImage('cat', image);
      })

      map.loadImage('stylesheets/marker.png', function (error, image) {
        if (error) throw error;
        map.addImage('collabs', image);
      })


      map.loadImage('stylesheets/marker1.png', function (error, image) {
        if (error) throw error;
        map.addImage('lead', image);
      })


      map.loadImage('stylesheets/marker2.png', function (error, image) {
        if (error) throw error;
        map.addImage('other', image);
      })


      map.loadImage('stylesheets/marker3.png', function (error, image) {
        if (error) throw error;
        map.addImage('partner', image);
      })







      for (i = 0; i < collabObj.features.length; i++) {



        map.addLayer({
          id: 'collabing' + i,
          type: 'symbol',



          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: collabProjects[i]
          },
          layout: {

            'icon-image': 'collabs',
            'icon-allow-overlap': true,
            'visibility': 'none'

          }

        })




      }




      for (i = 0; i < leadObj.features.length; i++) {



        map.addLayer({
          id: 'lead' + i,
          type: 'symbol',



          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: leadProjects[i]
          },
          layout: {

            'icon-image': 'lead',
            'icon-allow-overlap': true,
            'visibility': 'none'

          }

        })




      }


      for (i = 0; i < partnerObj.features.length; i++) {

        map.addLayer({
          id: 'partner' + i,
          type: 'symbol',



          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: partnerProjects[i]
          },
          layout: {

            'icon-image': 'partner',
            'icon-allow-overlap': true,
            'visibility': 'none'

          }

        })




      }





      for (i = 0; i < otherObj.features.length; i++) {



        map.addLayer({
          id: 'other' + i,
          type: 'symbol',



          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: otherProjects[i]
          },
          layout: {

            'icon-image': 'other',
            'icon-allow-overlap': true,
            'visibility': 'none'

          }

        })




      }








      for (j = 0; j < leadProjects.length; i++) {
        geoP = leadProjects[j].geometry.coordinates

        map.addLayer({
          id: 'lead_collabs' + geoP,
          type: 'symbol',
          minzoom: zoomthreshold,



          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: leadProjects[i]
          },
          layout: {

            'icon-image': 'square-stroked-15',
            'icon-allow-overlap': true,
            'visibility': 'none'
          }

        })

      }


      for (k = 0; k < collabProjects.length; k++) {


        geoP = collabProjects[k].geometry.coordinates


        map.addLayer({
          id: 'collab_collabs' + geoP,
          type: 'symbol',



          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: collabProjects[k]
          },
          layout: {

            'icon-image': 'cat',
            'icon-allow-overlap': true,
            'visibility': 'none'

          }

        })

      }



      for (l = 0; l < partnerProjects.length; l++) {

        geoP = partnerProjects[l].geometry.coordinates


        map.addLayer({
          id: 'partner_collabs' + geoP,
          type: 'symbol',



          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: partnerProjects[l]
          },
          layout: {

            'icon-image': 'restaurant-15',
            'icon-allow-overlap': true,
            'visibility': 'none'


          }

        })

      }


      projectsObj.features = _.uniqBy(projectsObj.features, (b) => b.geometry.coordinates[0] && b.geometry.coordinates[1]);


      for (i = 0; i < projectsObj.features.length; i++) {

        var geoP = projectsObj.features[i].geometry.coordinates
        var gp = projectsObj.features[i]



        map.addLayer({
          id: 'funding_locations' + geoP,
          type: 'symbol',
          maxzoom: 9,


          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: gp
          },
          layout: {

            'icon-image': 'cat',
            'icon-allow-overlap': true,
            'visibility': 'none',
            'icon-size': 1

          }

        })

      }

      map.addLayer({
        id: 'projects_locations',
        type: 'symbol',
        minzoom: 10,

        // Add a GeoJSON source containing place coordinates and information.
        source: {
          type: 'geojson',
          data: projectsObj
        },
        layout: {

          'icon-image': 'cat',
          'icon-allow-overlap': true,
          'visibility': 'visible',
          'icon-size': 3

        }

      })

      business1.features = _.uniqBy(business1.features, (b) => b.geometry.coordinates[0] && b.geometry.coordinates[1]);
      console.log('new', business1);


      map.addLayer({
        id: 'business_location',
        type: 'circle',

        maxzoom: 4,
        minzoom: 1,


        // Add a GeoJSON source containing place coordinates and information.
        source: {
          type: 'geojson',
          data: business1
        },
        paint: {
          "circle-radius": 8,
          "circle-color": "#4B0082",
          "circle-stroke-width": 2,
          "circle-stroke-color": "#E6ECC5"
        }
      })


      map.addLayer({
        id: 'specific_location',
        type: 'circle',
        minzoom: 6,

        // Add a GeoJSON source containing place coordinates and information.
        source: {
          type: 'geojson',
          data: business1
        },
        paint: {
          "circle-radius": 8,
          "circle-color": "#008000",

          "circle-stroke-width": 2,
          "circle-stroke-color": "#008000"
        }
      })







      for (i = 0; i < business1.features.length; i++) {

        clickedPoints = business1.features[i]

        //get the clickedListing
        //go and get the other listings with the same title
        //apply css

        map.addLayer({
          id: 'business_location11' + clickedPoints.geometry.coordinates,
          type: 'circle',
          minzoom: 4,
          maxzoom: 6,

          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: clickedPoints
          },
          paint: {
            "circle-radius": 8,
            "circle-color": "#E6ECC5",
            "circle-stroke-width": 2,
            "circle-stroke-color": "#E6ECC5"
          }
        })

      }



      for (i = 0; i < lowResultsObj.features.length; i++) {




        if (lowResultsObj.features[i].properties.amount <= 5) {
          clickedPoints = lowResultsObj.features[i]



          //add layer < 1
          map.addLayer({
            id: 'countries_location1' + clickedPoints.geometry.coordinates,
            type: 'circle',
            maxzoom: 1,


            // Add a GeoJSON source containing place coordinates and information.
            source: {
              type: 'geojson',
              data: lowResultsObj
            },
            paint: {
              "circle-radius": 2,
              "circle-color": "#FF0000",
              "circle-stroke-width": 2,
              "circle-stroke-color": "#FF0000"

            }
          })

          let radius = 5;

          setInterval(() => {
            map.setPaintProperty('countries_location1' + clickedPoints.geometry.coordinates, 'circle-radius', radius);
            radius = ++radius % 10
          }, 100);
        }

      }

      for (i = 0; i < midResultsObj.features.length; i++) {



        if ((midResultsObj.features[i].properties.amount > 5) && (midResultsObj.features[i].properties.amount <= 10)) {

          clickedPoints1 = midResultsObj.features[i]
          // layer >1 < 3
          let radius = 10

          map.addLayer({
            id: 'countries' + clickedPoints1.geometry.coordinates,
            type: 'circle',
            maxzoom: 1,

            // Add a GeoJSON source containing place coordinates and information.
            source: {
              type: 'geojson',
              data: midResultsObj
            },
            paint: {
              "circle-radius": 5,
              "circle-color": "#0000FF",
              "circle-stroke-width": 2,
              "circle-stroke-color": "#0000FF"

            }
          })

          setInterval(() => {
            map.setPaintProperty('countries' + clickedPoints1.geometry.coordinates, 'circle-radius', radius);
            radius = ++radius % 30
          }, 100);



        }
      }

      for (i = 0; i < highResultsObj.features.length; i++) {
        if (highResultsObj.features[i].properties.amount > 10) {
          clickedPoints2 = highResultsObj.features[i]

          let radius = 20;


          //get the clickedListing
          //go and get the other listings with the same title
          //apply css

          map.addLayer({
            id: 'countries_large' + clickedPoints2.geometry.coordinates,
            type: 'circle',
            maxzoom: 1,


            // Add a GeoJSON source containing place coordinates and information.
            source: {
              type: 'geojson',
              data: highResultsObj
            },
            paint: {

              "circle-color": "#FFFFFF",
              "circle-radius": 10,
              "circle-stroke-width": 2,
              "circle-stroke-color": "#FFFFFF"


            }
          })

          setInterval(() => {
            map.setPaintProperty('countries_large' + clickedPoints2.geometry.coordinates, 'circle-radius', radius);
            radius = ++radius % 30
          }, 100);



        }
      }





      for (i = 0; i < results.features.length; i++) {

        clickedPoints = results.features[i]

        //get the clickedListing
        //go and get the other listings with the same title
        //apply css

        map.addLayer({
          id: 'countries_text1' + clickedPoints.geometry.coordinates,
          type: 'symbol',
          maxzoom: 2,

          // Add a GeoJSON source containing place coordinates and information.
          source: {
            type: 'geojson',
            data: clickedPoints
          },
          layout: {

            'icon-allow-overlap': true,
            'text-field': "{amount}",
            'text-offset': [0, 0.6],
            'text-anchor': 'top'
          }
        })
      }


    })
  </script>

  <script type="text/javascript" src="/js/typeahead.min.js"></script>
  <script>



    $('input.personGet').typeahead({

      name: 'typeaheadPersonGet',
      remote: 'http://localhost:1234/searchPerson?key=%QUERY',
      limit: 2
    });



    $('input.organisationGet').typeahead({

      name: 'typeaheadGet',
      remote: 'http://localhost:1234/searchOrganisation?key=%QUERY',
      limit: 2
    });



    $('#typeahead_person_submit').on('submit', function (e) {
      e.preventDefault();

      $.ajax({
        type: "GET",
        url: "http://localhost:1234/getPerson",
        crossDomain: true,
        dataType: "json",
        data: $("#typeahead_person_submit").serialize(),
        success: function (data) {

          takeoffHighlighter(business1)
          highlightPerson(data)


        }

      });

    })

    $('#typeahead_personProject_submit').on('submit', function (e) {
      e.preventDefault();

      $.ajax({
        type: "GET",
        url: "http://localhost:1234/getPersonProject",
        crossDomain: true,
        dataType: "json",
        data: $("#typeahead_personProject_submit").serialize(),
        success: function (data) {

          highlightPPerson(data)
        }

      });

    })
    $('#typeahead_organisation_submit').on('submit', function (e) {

      e.preventDefault();

      $.ajax({
        type: "GET",
        url: "http://localhost:1234/organisationGet",
        crossDomain: true,
        dataType: "json",
        data: $("#typeahead_organisation_submit").serialize(),
        success: function (data) {

          if (data.length === 0) {
            swal({
              type: 'error',
              title: 'Oops...',
              text: 'No Organisations exist using that name!'
            })
          }
          else {
            takeoffHighlight(business1)
            highlighterOrg(data)

            removePop()
          }
        }

      });

    })

    $('#typeahead_project_submit').on('submit', function (e) {
      e.preventDefault();
      e.stopPropagation();

      $.ajax({
        type: "GET",
        url: "http://localhost:1234/projectFundersGet",
        crossDomain: true,
        dataType: "json",
        data: $("#typeahead_project_submit").serialize(),
        success: function (data) {
          if (data.length === 0) {
            swal({
              type: 'error',
              title: 'Oops...',
              text: 'No Funders exist currently using that name!'
            })
          }
          else {
            takeOffProjectHighlighter();
            projectHighlighter(data)
          }
        }

      });

    })

    $('#typeahead_grab_collabs').on('submit', function (e) {
      e.preventDefault();
      e.stopPropagation();

      $.ajax({
        type: "GET",
        url: "http://localhost:1234/projectCollabs",
        crossDomain: true,
        dataType: "json",
        data: $("#typeahead_grab_collabs").serialize(),
        success: function (data) {



          if (data.length === 0) {
            swal({
              type: 'error',
              title: 'Oops...',
              text: 'No Collaborations currently exist using that name'
            })
          }
          else {

            collabHighlighter(data)
          }
        }

      });

    })


    $('input.personProjectGet').typeahead({

      name: 'typeaheadPersonProjectGet',
      remote: 'http://localhost:1234/searchPersonProject?key=%QUERY',
      limit: 2
    });

    $('input.projectFunderGet').typeahead({

      name: 'typeaheadFunderGet',
      remote: 'http://localhost:1234/searchProjects?key=%QUERY',
      limit: 2
    });


    $('input.collabsGet').typeahead({

      name: 'typeaheadCollabs',
      remote: 'http://localhost:1234/searchCollabs?key=%QUERY',
      limit: 2
    });



    $('input.typeahead').typeahead({

      name: 'typeahead',
      remote: 'http://localhost:1234/search?key=%QUERY',
      limit: 5
    });



    $("#typeaheadSubmitAuthor").on('click', function (e) {
      document.getElementById('result_author_container').innerHTML = ''
    });

    $("#typeaheadSubmitAuthor").on('submit', function (e) {


      e.preventDefault();

      $.ajax({
        type: "GET",
        url: "http://localhost:1234/authorGrab",
        crossDomain: true,
        dataType: "json",
        data: $("#typeaheadSubmitAuthor").serialize(),
        success: function (data) {

          if (data.length === 0) {
            swal({
              type: 'error',
              title: 'Oops...',
              text: 'No Authors exist using that name!'
            })
          }
          else {

            appendSearch(data)
          }
        }

      });



    });











  </script>

  <script>

    map.on('click', function (e) {
      var newFeatures
      // Query all the rendered points in the view
      var features = map.queryRenderedFeatures(e.point, { layers: ['projects_locations'] });

      for (i = 0; i < projectsObj.features.length; i++) {
        newFeatures = map.queryRenderedFeatures(e.point);

      }
      var selectedFeatureIndex;


      if (features.length) {

        var clickedPoint = features[0];
        var clickedPlace = features[0].place_name



        var clickedName = clickedPoint.properties.funder_title



        // 1. Fly to the point
        flyToProjects(clickedPoint);
        // 2. Close all other popups and display popup for clicked store

      }

      if (newFeatures.length) {


        var clickedPoint = newFeatures[0];




        var clickedName = clickedPoint.properties.funder_title
        var geo = clickedPoint.geometry.coordinates



        // 1. Fly to the point
        flyToProjects(clickedPoint);
        // 2. Close all other popups and display popup for clicked store
        createProjectPop(clickedPoint, clickedName, geo)

      }




    });


    map.on('click', function (e) {
      // Query all the rendered points in the view
      var features = map.queryRenderedFeatures(e.point, { layers: ['business_location'] });
      var selectedFeatureIndex;


      var objValues = business1






      if (features.length) {

        var clickedPoint = features[0];



        var clickedName = clickedPoint.properties.title




        // 1. Fly to the point
        flyToStore(clickedPoint);
        // 2. Close all other popups and display popup for clicked store
        createPopUp(clickedPoint, clickedName);


      }

    });

    map.on('click', function (e) {
      // Query all the rendered points in the view
      var features = map.queryRenderedFeatures(e.point, { layers: ['specific_location'] });
      var selectedFeatureIndex;


      var objValues = business1






      if (features.length) {

        var clickedPoint = features[0];



        var clickedName = clickedPoint.properties.title




        // 1. Fly to the point
        flyToStore(clickedPoint);
        // 2. Close all other popups and display popup for clicked store
        createPopUp(clickedPoint, clickedName);
        // 3. Highlight listing in sidebar (and remove highlight for all other listings)
        var activeItem = document.getElementsByClassName('active');
        if (activeItem[0]) {
          activeItem[0].classList.remove('active');
        }
        // Find the index of the store.features that corresponds to the clickedPoint that fired the event listener
        var selectedFeature = clickedPoint._geometry.coordinates;



        for (var i = 0; i < objValues.features.length; i++) {
          arr1 = objValues.features[i].geometry.coordinates
          arr2 = selectedFeature

          if (arraysEqual(arr1, arr2) === true) {
            selectedFeatureIndex = i;

            var listing = document.getElementById('listing-' + selectedFeatureIndex);
            listing.classList.add('active');


          }


          // Select the correct list item using the found index and add the active class

        }

      }



    });

  </script>


</body>

</html>